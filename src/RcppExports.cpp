// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ddirmultinomial_cpp
double ddirmultinomial_cpp(NumericVector x, double n, NumericVector alpha, bool log);
RcppExport SEXP _HBMAP_ddirmultinomial_cpp(SEXP xSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(ddirmultinomial_cpp(x, n, alpha, log));
    return rcpp_result_gen;
END_RCPP
}
// compute_probability_cpp
NumericMatrix compute_probability_cpp(NumericMatrix Y, NumericVector omega_M, NumericMatrix q_star_1_J, NumericVector gamma_1_J_star);
RcppExport SEXP _HBMAP_compute_probability_cpp(SEXP YSEXP, SEXP omega_MSEXP, SEXP q_star_1_JSEXP, SEXP gamma_1_J_starSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y(YSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type omega_M(omega_MSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type q_star_1_J(q_star_1_JSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type gamma_1_J_star(gamma_1_J_starSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_probability_cpp(Y, omega_M, q_star_1_J, gamma_1_J_star));
    return rcpp_result_gen;
END_RCPP
}
// draw_cat
int draw_cat(NumericVector prob);
RcppExport SEXP _HBMAP_draw_cat(SEXP probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type prob(probSEXP);
    rcpp_result_gen = Rcpp::wrap(draw_cat(prob));
    return rcpp_result_gen;
END_RCPP
}
// Z_sample_cpp
IntegerVector Z_sample_cpp(NumericMatrix Prob);
RcppExport SEXP _HBMAP_Z_sample_cpp(SEXP ProbSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Prob(ProbSEXP);
    rcpp_result_gen = Rcpp::wrap(Z_sample_cpp(Prob));
    return rcpp_result_gen;
END_RCPP
}
// q_star_logprob_cpp
double q_star_logprob_cpp(NumericMatrix Y_sub, NumericVector q_j_star, double gamma_j_star, NumericVector alpha_h);
RcppExport SEXP _HBMAP_q_star_logprob_cpp(SEXP Y_subSEXP, SEXP q_j_starSEXP, SEXP gamma_j_starSEXP, SEXP alpha_hSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_sub(Y_subSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q_j_star(q_j_starSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_j_star(gamma_j_starSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type alpha_h(alpha_hSEXP);
    rcpp_result_gen = Rcpp::wrap(q_star_logprob_cpp(Y_sub, q_j_star, gamma_j_star, alpha_h));
    return rcpp_result_gen;
END_RCPP
}
// gamma_logprob_cpp
double gamma_logprob_cpp(NumericMatrix Y_sub, NumericVector q_j_star, double gamma_j_star, double a_gamma, double b_gamma, double lb_gamma);
RcppExport SEXP _HBMAP_gamma_logprob_cpp(SEXP Y_subSEXP, SEXP q_j_starSEXP, SEXP gamma_j_starSEXP, SEXP a_gammaSEXP, SEXP b_gammaSEXP, SEXP lb_gammaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type Y_sub(Y_subSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type q_j_star(q_j_starSEXP);
    Rcpp::traits::input_parameter< double >::type gamma_j_star(gamma_j_starSEXP);
    Rcpp::traits::input_parameter< double >::type a_gamma(a_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type b_gamma(b_gammaSEXP);
    Rcpp::traits::input_parameter< double >::type lb_gamma(lb_gammaSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma_logprob_cpp(Y_sub, q_j_star, gamma_j_star, a_gamma, b_gamma, lb_gamma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_HBMAP_ddirmultinomial_cpp", (DL_FUNC) &_HBMAP_ddirmultinomial_cpp, 4},
    {"_HBMAP_compute_probability_cpp", (DL_FUNC) &_HBMAP_compute_probability_cpp, 4},
    {"_HBMAP_draw_cat", (DL_FUNC) &_HBMAP_draw_cat, 1},
    {"_HBMAP_Z_sample_cpp", (DL_FUNC) &_HBMAP_Z_sample_cpp, 1},
    {"_HBMAP_q_star_logprob_cpp", (DL_FUNC) &_HBMAP_q_star_logprob_cpp, 4},
    {"_HBMAP_gamma_logprob_cpp", (DL_FUNC) &_HBMAP_gamma_logprob_cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_HBMAP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
